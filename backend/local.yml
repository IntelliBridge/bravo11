version: '3'

volumes:
  bravo11_local_postgres_data: {}
  bravo11_local_postgres_data_backups: {}
  esdata01:
    driver: local
  kibanadata:
    driver: local

services:
  django: &django
    build:
      context: .
      dockerfile: ./compose/local/django/Dockerfile
    image: bravo11_local_django
    container_name: bravo11_local_django
    depends_on:
      - postgres
      - es01
    volumes:
      - .:/app:z
    env_file:
      - ./.envs/.local/.django
      - ./.envs/.local/.postgres
      - ./.envs/.local/.aws
    ports:
      - '8000:8000'
    command: /start

  postgres:
    build:
      context: .
      dockerfile: ./compose/production/postgres/Dockerfile
    image: bravo11_production_postgres
    container_name: bravo11_local_postgres
    volumes:
      - bravo11_local_postgres_data:/var/lib/postgresql/data
      - bravo11_local_postgres_data_backups:/backups
    env_file:
      - ./.envs/.local/.postgres

#  docs:
#    image: bravo11_local_docs
#    container_name: bravo11_local_docs
#    build:
#      context: .
#      dockerfile: ./compose/local/docs/Dockerfile
#    env_file:
#      - ./.envs/.local/.django
#    volumes:
#      - ./docs:/docs:z
#      - ./config:/app/config:z
#      - ./bravo11:/app/bravo11:z
#    ports:
#      - '9000:9000'
#    command: /start-docs

#  redis:
#    image: docker.io/redis:6
#    container_name: bravo11_local_redis

#  celeryworker:
#    <<: *django
#    image: bravo11_local_celeryworker
#    container_name: bravo11_local_celeryworker
#    depends_on:
#      - redis
#      - postgres
#    ports: []
#    command: /start-celeryworker
#
#  celerybeat:
#    <<: *django
#    image: bravo11_local_celerybeat
#    container_name: bravo11_local_celerybeat
#    depends_on:
#      - redis
#      - postgres
#    ports: []
#    command: /start-celerybeat

  es01:
    image: docker.elastic.co/elasticsearch/elasticsearch:8.7.1
    labels:
      co.elastic.logs/module: elasticsearch
    volumes:
      - esdata01:/usr/share/elasticsearch/data
    ports:
      - 9200:9200
    environment:
      - node.name=es01
      - cluster.name=docker-cluster
      - discovery.type=single-node
      - ELASTIC_PASSWORD=changeme
      - bootstrap.memory_lock=true
      - xpack.security.enabled=false
      - xpack.security.http.ssl.enabled=false
      - xpack.security.transport.ssl.enabled=false
      - http.cors.allow-origin="*" # Only use unrestricted value for local development
      - http.cors.enabled=true
      - http.cors.allow-credentials=true
      - http.cors.allow-methods="OPTIONS, POST"
      - http.cors.allow-headers="X-Requested-With, X-Auth-Token, Content-Type, Content-Length, Authorization, Access-Control-Allow-Headers, Accept"
    ulimits:
      memlock:
        soft: -1
        hard: -1
    healthcheck:
      test:
        [
          "CMD-SHELL",
          "curl http://localhost:9200",
        ]
      interval: 10s
      timeout: 10s
      retries: 120


  kibana:
    depends_on:
      es01:
        condition: service_healthy
    image: docker.elastic.co/kibana/kibana:8.7.1
    labels:
      co.elastic.logs/module: kibana
    volumes:
      - kibanadata:/usr/share/kibana/data
    ports:
      - 5601:5601
    environment:
      - SERVERNAME=kibana
      - ELASTICSEARCH_HOSTS=http://es01:9200
      - ELASTICSEARCH_USERNAME=kibana_system
      - ELASTICSEARCH_PASSWORD=changeme
    healthcheck:
      test:
        [
          "CMD-SHELL",
          "curl http://localhost:5601",
        ]
      interval: 10s
      timeout: 10s
      retries: 120
